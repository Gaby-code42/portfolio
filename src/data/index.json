[
    {
    "id":"1",
    "title":"React",
    "pictures": ["react1.png", "react2.png", "react3.png","react4.png","end.png" ],
    "details":["Description.","Problématique.","Résolution.","Compétences acquises.","Pour aller plus loin."],
    "shortdescription":"Venez découvrir mon projet React , projet que réalisé lors de mon cursus avec OpenClassRoom. Il aura pour but de créer une interface utilisateur pour un site d'hébergement 'Kasa'",
    "description":[
                "'Kasa' est un projet développé avec React dans le cadre de ma formation chez OpenClassrooms. Ce site d'hébergement permet aux utilisateurs de consulter une liste d'appartements sous forme de cartes. En cliquant sur une carte, l'utilisateur est redirigé vers une page d'annonce dédiée, qui affiche un carrousel d'images et des accordéons avec des informations supplémentaires sur l'appartement.Le projet inclut également une page d'erreur pour gérer les liens ou les pages invalides. Les données de l’application, telles que les descriptions, les images et les informations sur les logements, sont stockées dans une base de données JSON. Ce projet m’a permis de travailler sur la gestion des états avec React, la création d’interfaces interactives et l'optimisation de l'expérience utilisateur avec des fonctionnalités comme les carrousels et les accordéons.",
                "Les principales problématiques rencontrées dans le projet 'Kasa' concernaient la gestion des données, l’interactivité des éléments et la gestion des erreurs. Tout d'abord, la gestion des données a été réalisée via un dossier JSON, ce qui m'a permis d'apprendre à structurer et manipuler des données statiques de manière dynamique dans l'application. Ensuite, la création d'un carrousel d'images a présenté un défi en termes de gestion de l'état et de la navigation fluide entre les images. J'ai également intégré des accordéons avec un effet de slide pour afficher des informations supplémentaires de manière interactive, en veillant à une transition fluide et accessible. Enfin, la mise en place d'une page d'erreur a été nécessaire pour gérer les erreurs de navigation et améliorer l'expérience utilisateur, en affichant un message clair lorsqu'une page n'existait pas ou était incorrecte.",
                "Pour surmonter les problématiques rencontrées, j'ai adopté des solutions simples et efficaces. Pour gérer les données via un fichier JSON, j'ai structuré les informations de manière claire et j'ai utilisé les hooks useState et useEffect de React pour charger et afficher dynamiquement les données dans l'application. Pour le carrousel, bien qu'il n'y ait pas d'animation complexe, j'ai mis en place une logique de navigation simple en permettant à l'utilisateur de passer d'une image à l'autre en cliquant sur des boutons 'précédent' et 'suivant'. En ce qui concerne les accordéons avec effet de slide, j'ai utilisé des transitions CSS pour rendre l'affichage des informations supplémentaires plus fluide et agréable. Enfin, pour la gestion des erreurs, j'ai créé une page dédiée qui redirige l'utilisateur vers un message d'erreur en cas de page introuvable, améliorant ainsi l'expérience utilisateur et la navigation sur le site.",
                "Ce projet m'a permis de développer plusieurs compétences techniques et pratiques. J'ai renforcé mes connaissances en React, en particulier dans l'utilisation des hooks (useState, useEffect) pour la gestion dynamique des données. J'ai également appris à manipuler des fichiers JSON pour structurer et afficher des données dans une application React. La création du carrousel m'a permis de mieux comprendre la gestion de l'état et de la navigation entre les éléments. L'implémentation des accordéons avec effet de slide m'a donné l'occasion de maîtriser les transitions CSS pour améliorer l'interactivité de l'interface. Enfin, la gestion des erreurs m'a permis d'améliorer mes compétences en gestion de la navigation, en créant des pages d'erreur pour gérer les liens cassés et les routes incorrectes, offrant ainsi une expérience utilisateur plus fluide et sécurisée.",
                "Plusieurs améliorations peuvent être apportées à ce projet. Tout d'abord, il serait intéressant d'implémenter un système de filtration par note, permettant aux utilisateurs de trier les appartements en fonction de la qualité des avis. Une barre de recherche pourrait également être ajoutée pour permettre aux utilisateurs de trouver plus facilement des appartements en fonction de critères spécifiques (localisation, prix, type de logement, etc.). La navigation pourrait être améliorée en ajoutant des menus ou des catégories, afin de rendre l'interface encore plus intuitive. Une autre amélioration serait d'intégrer une API pour rendre les données plus dynamiques, par exemple en récupérant les informations des appartements directement depuis une base de données distante, permettant ainsi de maintenir les informations à jour sans avoir à modifier le fichier JSON manuellement. Enfin, je prévois de partager le code source du projet sur GitHub afin de rendre le projet accessible et permettre à d'autres développeurs d'y contribuer. Vous pouvez consulter mon projet GitHub "
                ],
    "icon":"faReact",
    "date":["Date de réalisation : 5 octobre 2024"],
    "link": ["https://github.com/Gaby-code42/kasa"]
    }
    ,
    {
     "id":"2",
     "title":"Node.js",
     "details":["Description.","Problématique.","Résolution.","Compétences acquises.","Pour aller plus loin."],
     "pictures": ["node1.png", "node2.png","node3.png","node4.png","end.png"] ,
     "shortdescription":"Venez découvrir mon projet Node.js et MongoDb , projet réalisé lors de mon cursus avec OpenClassRoom. Il aura pour but la gestion backend d'une librairie en ligne , avec l'utilisation d'une API Restful",
     "description":[
                    "Le projet 'Mon Vieux Grimoire' est une application Node.js pour gérer une librairie en ligne. Le projet a été réalisé dans le cadre de ma formation chez OpenClassRoom. Il utilise une API RESTful avec des opérations CRUD pour interagir avec une base de données MongoDB. L'authentification des utilisateurs est assurée par un middleware avec JWT pour les tokens et bcrypt pour le hachage des mots de passe, garantissant ainsi la sécurité des données. Les routes sont sécurisées et l'accès est restreint en fonction des rôles des utilisateurs. Pour la gestion des fichiers, Multer est utilisé pour le téléchargement d'images, et Sharp permet de redimensionner et d'optimiser les couvertures des livres. Le projet offre une gestion sécurisée, performante et optimisée des livres et de leurs ressources associées. Il assure également une expérience utilisateur fluide avec une manipulation efficace des données et des fichiers multimédias.",
                    "Le projet 'Mon Vieux Grimoire' a rencontré plusieurs défis techniques. L'une des plus grandes difficultés a été d'ajouter un système de rating aux livres déjà existants, en garantissant que chaque utilisateur puisse évaluer un livre une seule fois. Cela a nécessité de gérer l'unicité des notations. Un autre défi majeur a été la sécurisation des routes API, pour protéger l'accès aux données sensibles via JWT et bcrypt, tout en offrant une authentification robuste. En parallèle, la gestion des fichiers d'images de couverture a été complexe, car il fallait permettre leur téléchargement tout en assurant leur compression et redimensionnement avec Multer et Sharp. Enfin, la mise en place d'une API RESTful performante avec MongoDB pour gérer les opérations CRUD a nécessité une attention particulière",
                    "Pour résoudre ces problématiques, nous avons mis en place un système de vérification dans la base de données pour garantir que chaque utilisateur puisse noter un livre uniquement une fois. Ce contrôle d'unicité a été assuré grâce à l'ID de l'utilisateur et du livre. Concernant la sécurisation des routes, des middleware ont été utilisés avec JWT pour générer des tokens d'accès et bcrypt pour sécuriser les mots de passe des utilisateurs. Pour la gestion des fichiers, Multer a permis le téléchargement des images, et Sharp a été utilisé pour redimensionner et compresser les couvertures avant de les stocker. Enfin, la structure de l'API RESTful et la gestion de MongoDB ont été optimisées pour garantir une expérience fluide et sécurisée pour l'utilisateur.",
                    "Ce projet m'a permis d'acquérir de solides compétences techniques dans plusieurs domaines. J'ai approfondi ma maîtrise de Node.js et d'Express, en créant une API RESTful performante et sécurisée, et en gérant les interactions avec une base de données MongoDB. Pour la sécurité, j'ai utilisé JWT et bcrypt pour protéger les routes et sécuriser les mots de passe des utilisateurs. J'ai également appris à gérer l'unicité des données avec l'outil uniqueValidator, notamment pour éviter que les utilisateurs ne notent plusieurs fois le même livre. La gestion des fichiers avec Multer et le traitement d'images avec Sharp m'ont permis d'optimiser le téléchargement et la manipulation des couvertures de livres. Enfin, ce projet m'a permis de structurer un code propre et modulaire, tout en renforçant ma capacité à résoudre des problématiques complexes liées à la gestion de données.",
                    "Pour améliorer le site 'Mon Vieux Grimoire', plusieurs fonctionnalités pourraient être ajoutées. L'intégration de Nodemailer permettrait d'envoyer des emails de confirmation lors de l'inscription, de réinitialisation de mot de passe ou d'autres notifications importantes, améliorant ainsi l'interaction avec l'utilisateur. L'ajout d'un utilisateur administrateur permettrait de gérer l'utilisation abusive, de contrôler les contenus ou les évaluations suspectes, et de modérer les actions des utilisateurs. Une autre amélioration serait d'ajouter la possibilité pour les utilisateurs de partager leur livre préféré avec d'autres membres, créant ainsi une dimension sociale et interactive. Enfin, le site pourrait être enrichi avec des fonctionnalités de recherche avancée et de filtres pour faciliter la navigation dans la bibliothèque. Je prévois également de partager mon code source via mon référentiel Git pour permettre à d'autres développeurs de contribuer et d'améliorer le projet."
                    ],
     "icon":"faNode",
     "date":["Date de réalisation : 18 octobre 2024"],
     "link": ["https://github.com/Gaby-code42/Backend_"]
    }
    ,
    {
        "id":"3",
        "title":"Node.js",
        "details":["Description.","Problématique.","Résolution.","Compétences acquises.","Pour aller plus loin."],
        "pictures": ["node1.png", "node2.png","node3.png","node4.png","end.png"] ,
        "shortdescription":"Venez découvrir mon projet Node.js et MongoDb , projet réalisé lors de mon cursus avec OpenClassRoom. Il aura pour but la gestion backend d'une librairie en ligne , avec l'utilisation d'une API Restful",
        "description":[
                       "Le projet 'Mon Vieux Grimoire' est une application Node.js pour gérer une librairie en ligne. Le projet a été réalisé dans le cadre de ma formation chez OpenClassRoom. Il utilise une API RESTful avec des opérations CRUD pour interagir avec une base de données MongoDB. L'authentification des utilisateurs est assurée par un middleware avec JWT pour les tokens et bcrypt pour le hachage des mots de passe, garantissant ainsi la sécurité des données. Les routes sont sécurisées et l'accès est restreint en fonction des rôles des utilisateurs. Pour la gestion des fichiers, Multer est utilisé pour le téléchargement d'images, et Sharp permet de redimensionner et d'optimiser les couvertures des livres. Le projet offre une gestion sécurisée, performante et optimisée des livres et de leurs ressources associées. Il assure également une expérience utilisateur fluide avec une manipulation efficace des données et des fichiers multimédias.",
                       "Le projet 'Mon Vieux Grimoire' a rencontré plusieurs défis techniques. L'une des plus grandes difficultés a été d'ajouter un système de rating aux livres déjà existants, en garantissant que chaque utilisateur puisse évaluer un livre une seule fois. Cela a nécessité de gérer l'unicité des notations. Un autre défi majeur a été la sécurisation des routes API, pour protéger l'accès aux données sensibles via JWT et bcrypt, tout en offrant une authentification robuste. En parallèle, la gestion des fichiers d'images de couverture a été complexe, car il fallait permettre leur téléchargement tout en assurant leur compression et redimensionnement avec Multer et Sharp. Enfin, la mise en place d'une API RESTful performante avec MongoDB pour gérer les opérations CRUD a nécessité une attention particulière",
                       "Pour résoudre ces problématiques, nous avons mis en place un système de vérification dans la base de données pour garantir que chaque utilisateur puisse noter un livre uniquement une fois. Ce contrôle d'unicité a été assuré grâce à l'ID de l'utilisateur et du livre. Concernant la sécurisation des routes, des middleware ont été utilisés avec JWT pour générer des tokens d'accès et bcrypt pour sécuriser les mots de passe des utilisateurs. Pour la gestion des fichiers, Multer a permis le téléchargement des images, et Sharp a été utilisé pour redimensionner et compresser les couvertures avant de les stocker. Enfin, la structure de l'API RESTful et la gestion de MongoDB ont été optimisées pour garantir une expérience fluide et sécurisée pour l'utilisateur.",
                       "Ce projet m'a permis d'acquérir de solides compétences techniques dans plusieurs domaines. J'ai approfondi ma maîtrise de Node.js et d'Express, en créant une API RESTful performante et sécurisée, et en gérant les interactions avec une base de données MongoDB. Pour la sécurité, j'ai utilisé JWT et bcrypt pour protéger les routes et sécuriser les mots de passe des utilisateurs. J'ai également appris à gérer l'unicité des données avec l'outil uniqueValidator, notamment pour éviter que les utilisateurs ne notent plusieurs fois le même livre. La gestion des fichiers avec Multer et le traitement d'images avec Sharp m'ont permis d'optimiser le téléchargement et la manipulation des couvertures de livres. Enfin, ce projet m'a permis de structurer un code propre et modulaire, tout en renforçant ma capacité à résoudre des problématiques complexes liées à la gestion de données.",
                       "Pour améliorer le site 'Mon Vieux Grimoire', plusieurs fonctionnalités pourraient être ajoutées. L'intégration de Nodemailer permettrait d'envoyer des emails de confirmation lors de l'inscription, de réinitialisation de mot de passe ou d'autres notifications importantes, améliorant ainsi l'interaction avec l'utilisateur. L'ajout d'un utilisateur administrateur permettrait de gérer l'utilisation abusive, de contrôler les contenus ou les évaluations suspectes, et de modérer les actions des utilisateurs. Une autre amélioration serait d'ajouter la possibilité pour les utilisateurs de partager leur livre préféré avec d'autres membres, créant ainsi une dimension sociale et interactive. Enfin, le site pourrait être enrichi avec des fonctionnalités de recherche avancée et de filtres pour faciliter la navigation dans la bibliothèque. Je prévois également de partager mon code source via mon référentiel Git pour permettre à d'autres développeurs de contribuer et d'améliorer le projet."
                       ],
        "icon":"faNode",
        "date":["Date de réalisation : 18 octobre 2024"],
        "link": ["https://github.com/Gaby-code42/Backend_"]
       }
       ,
       {
           "id":"4",
           "title":"Node.js",
           "details":["Description.","Problématique.","Résolution.","Compétences acquises.","Pour aller plus loin."],
           "pictures": ["node1.png", "node2.png","node3.png","node4.png","end.png"] ,
           "shortdescription":"Venez découvrir mon projet Node.js et MongoDb , projet réalisé lors de mon cursus avec OpenClassRoom. Il aura pour but la gestion backend d'une librairie en ligne , avec l'utilisation d'une API Restful",
           "description":[
                          "Le projet 'Mon Vieux Grimoire' est une application Node.js pour gérer une librairie en ligne. Le projet a été réalisé dans le cadre de ma formation chez OpenClassRoom. Il utilise une API RESTful avec des opérations CRUD pour interagir avec une base de données MongoDB. L'authentification des utilisateurs est assurée par un middleware avec JWT pour les tokens et bcrypt pour le hachage des mots de passe, garantissant ainsi la sécurité des données. Les routes sont sécurisées et l'accès est restreint en fonction des rôles des utilisateurs. Pour la gestion des fichiers, Multer est utilisé pour le téléchargement d'images, et Sharp permet de redimensionner et d'optimiser les couvertures des livres. Le projet offre une gestion sécurisée, performante et optimisée des livres et de leurs ressources associées. Il assure également une expérience utilisateur fluide avec une manipulation efficace des données et des fichiers multimédias.",
                          "Le projet 'Mon Vieux Grimoire' a rencontré plusieurs défis techniques. L'une des plus grandes difficultés a été d'ajouter un système de rating aux livres déjà existants, en garantissant que chaque utilisateur puisse évaluer un livre une seule fois. Cela a nécessité de gérer l'unicité des notations. Un autre défi majeur a été la sécurisation des routes API, pour protéger l'accès aux données sensibles via JWT et bcrypt, tout en offrant une authentification robuste. En parallèle, la gestion des fichiers d'images de couverture a été complexe, car il fallait permettre leur téléchargement tout en assurant leur compression et redimensionnement avec Multer et Sharp. Enfin, la mise en place d'une API RESTful performante avec MongoDB pour gérer les opérations CRUD a nécessité une attention particulière",
                          "Pour résoudre ces problématiques, nous avons mis en place un système de vérification dans la base de données pour garantir que chaque utilisateur puisse noter un livre uniquement une fois. Ce contrôle d'unicité a été assuré grâce à l'ID de l'utilisateur et du livre. Concernant la sécurisation des routes, des middleware ont été utilisés avec JWT pour générer des tokens d'accès et bcrypt pour sécuriser les mots de passe des utilisateurs. Pour la gestion des fichiers, Multer a permis le téléchargement des images, et Sharp a été utilisé pour redimensionner et compresser les couvertures avant de les stocker. Enfin, la structure de l'API RESTful et la gestion de MongoDB ont été optimisées pour garantir une expérience fluide et sécurisée pour l'utilisateur.",
                          "Ce projet m'a permis d'acquérir de solides compétences techniques dans plusieurs domaines. J'ai approfondi ma maîtrise de Node.js et d'Express, en créant une API RESTful performante et sécurisée, et en gérant les interactions avec une base de données MongoDB. Pour la sécurité, j'ai utilisé JWT et bcrypt pour protéger les routes et sécuriser les mots de passe des utilisateurs. J'ai également appris à gérer l'unicité des données avec l'outil uniqueValidator, notamment pour éviter que les utilisateurs ne notent plusieurs fois le même livre. La gestion des fichiers avec Multer et le traitement d'images avec Sharp m'ont permis d'optimiser le téléchargement et la manipulation des couvertures de livres. Enfin, ce projet m'a permis de structurer un code propre et modulaire, tout en renforçant ma capacité à résoudre des problématiques complexes liées à la gestion de données.",
                          "Pour améliorer le site 'Mon Vieux Grimoire', plusieurs fonctionnalités pourraient être ajoutées. L'intégration de Nodemailer permettrait d'envoyer des emails de confirmation lors de l'inscription, de réinitialisation de mot de passe ou d'autres notifications importantes, améliorant ainsi l'interaction avec l'utilisateur. L'ajout d'un utilisateur administrateur permettrait de gérer l'utilisation abusive, de contrôler les contenus ou les évaluations suspectes, et de modérer les actions des utilisateurs. Une autre amélioration serait d'ajouter la possibilité pour les utilisateurs de partager leur livre préféré avec d'autres membres, créant ainsi une dimension sociale et interactive. Enfin, le site pourrait être enrichi avec des fonctionnalités de recherche avancée et de filtres pour faciliter la navigation dans la bibliothèque. Je prévois également de partager mon code source via mon référentiel Git pour permettre à d'autres développeurs de contribuer et d'améliorer le projet."
                          ],
           "icon":"faNode",
           "date":["Date de réalisation : 18 octobre 2024"],
           "link": ["https://github.com/Gaby-code42/Backend_"]
          }
]